<div class="grid">
    <div class="w-full place-self-center">
        @foreach (var guess in Helper.TodayGuesses)
        {
            <div class="mb-2 h-10 flex flex-row">
                <div class="@inputClass grow flex-initial">
                    <p class="bg-white-800 px-2 font-bold">@guess.Text</p>
                </div>
                <div class="@inputClass ml-3 basis-12 flex-none">
                    @switch (@guess.Position)
                    {
                        case Position.Before:
                            <span class="mx-3 place-self-center tooltip">
                                <i class="twa twa-right-arrow" />
                                <span class="tooltiptext">La réponse est après</span>
                            </span>
                            break;
                        case Position.After:
                            <span class="mx-3 place-self-center tooltip">
                                <i class="twa twa-left-arrow" />
                                <span class="tooltiptext">La réponse est avant</span>
                            </span>
                            break;
                        case null:
                            if (guess.Score == 100)
                            {
                                <span class="mx-3 place-self-center tooltip">
                                    <i class="twa twa-party-popper" />
                                    <span class="tooltiptext">Bonne réponse !! <i class="twa twa-grinning-face-with-big-eyes" /></span>
                                </span>
                            }
                            break;
                    }
                </div>
                <div class="@inputClass ml-3 w-12 basis-12 flex-none">
                    @if (guess.Score is not null)
                    {
                        <p class="bg-slate-800 place-self-center tooltip">
                            @guess.Score%
                            <span class="tooltiptext">Proximité du livre par rapport à la réponse</span>
                        </p>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    private const string inputClass = "py-2 text-slate-400 relative bg-slate-800 rounded-lg shadow outline-none focus:outline-none focus:shadow-outline grid";

    protected async override Task OnInitializedAsync()
    {
        Helper.Guesses = await LocalStorage.ContainKeyAsync(nameof(Helper.Guesses))
                        ? await LocalStorage.GetItemAsync<ObservableCollection<Guess>>(nameof(Helper.Guesses))
                        : new();

        if (!Helper.TodayGuesses.Any())
        {
            Helper.TodayGuesses.AddRange(Helper.Guesses.Where(g => g.Date == DateTime.Today));
            for (int i = 0; Helper.TodayGuesses.Count < 6; i++)
            {
                Helper.Guesses.Add(new());
            }
            foreach (var guess in Helper.TodayGuesses)
            {
                guess.Send += StateHasChanged;
            }
        }
        await base.OnInitializedAsync();
    }
}