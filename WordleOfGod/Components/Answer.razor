<div class="grid">
    <div class="mt-3 lg:w-6/12 place-self-center flex flex-row">
        @if (IsFinished)
        {
            <button @onclick="Share" class="w-full text-white bg-green-600 hover:bg-green-700 active:bg-green-800 font-bold uppercase text-sm px-6 py-3 rounded-lg shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150">
                <p class="place-self-center text-xl"><i class="twa twa-link" /> Partager</p>
            </button>
        }
        else
        {
            <input class="lg:w-full mr-3 px-3 py-3 placeholder-slate-500 text-slate-900 relative bg-slate-200 rounded-lg text-sm shadow outline-none focus:outline-none focus:shadow-outline grow"
               type="text" placeholder="Genèse, Exode,..." @bind-value="@UserAnswer" list="books" />
            <datalist id="books">
                @foreach (var book in Helper.Books)
                {
                    <option>@book.Value</option>
                }
            </datalist>

            <div class="py-1 text-slate-400 relative bg-slate-200 rounded-lg shadow outline-none focus:outline-none focus:shadow-outline grid basis-12">
                <button class="basis-12" @onclick="Validate">
                    <p class="place-self-center text-3xl"><i class="twa twa-check-mark" /></p>
                </button>
            </div>
        }
    </div>
</div>

@code {
    public string? UserAnswer { get; set; }
    public bool IsFinished => Helper.Guesses.Any(g => g.Score == 100) || Helper.Guesses.Any() && Helper.Guesses.All(g => g.Score is not null);

    protected async override Task OnInitializedAsync()
    {
        while (!Helper.Guesses.Any()) // TODO : timeout
        {
            await Task.Delay(5);
        }
        await base.OnInitializedAsync();
    }

    private async Task Validate()
    {
        var selectedBook = Helper.Books.SingleOrDefault(b => b.Value.ToLower() == UserAnswer?.ToLower());
        if (selectedBook.Equals(default(KeyValuePair<string, string>)))
        {
            ToastService.ShowWarning("Veuillez sélectionner une réponse dans la liste déroulante.", "Attention");
            return;
        }

        var guess = Helper.TodayGuesses.First(g => g.Score is null);
        guess.Text = UserAnswer;
        UserAnswer = null;
        if (Helper.Answer.ToLower() == selectedBook.Key.ToLower())
        {
            guess.Position = null;
            guess.Score = 100;
            ToastService.ShowSuccess("Vous avez trouvé la réponse, n'hésitez pas à partager votre résultat !", "Félicitations !");
        }
        else
        {
            var indexOfUserAnswer = Helper.Books.Keys.ToList().IndexOf(selectedBook.Key);
            var indexOfGoodAnswer = Helper.Books.Keys.ToList().IndexOf(Helper.Answer);
            var nbOfAnswersBefore = indexOfGoodAnswer - Helper.Books.Keys.ToList().IndexOf(Helper.Books.Keys.First());
            var nbOfAnswersAfter = Helper.Books.Keys.ToList().IndexOf(Helper.Books.Keys.Last()) - indexOfGoodAnswer;
            var nbOfAnswersMax = nbOfAnswersBefore > nbOfAnswersAfter
                                    ? nbOfAnswersBefore
                                    : nbOfAnswersAfter;
            var nbOfAnswersBetweenUserAndGood = indexOfUserAnswer < indexOfGoodAnswer
                                                    ? indexOfGoodAnswer - indexOfUserAnswer
                                                    : indexOfUserAnswer - indexOfGoodAnswer;
            guess.Position = indexOfUserAnswer < indexOfGoodAnswer
                                ? Position.Before
                                : Position.After;
            guess.Score = Convert.ToInt32((1 - (double)nbOfAnswersBetweenUserAndGood / (double)nbOfAnswersMax) * 100);
            if (IsFinished)
            {
                ToastService.ShowInfo($"Zut... Vous n'avez pas trouvé la bonne réponse, c'était \"{Helper.Books[Helper.Answer]}\".\r\nN'hésitez pas à partager votre résultat quand même !", "Game over...");
            }
        }
        guess.NotifySend();
        StateHasChanged();
        await LocalStorage.SetItemAsync<List<Guess>>(nameof(Helper.Guesses), Helper.Guesses.ToList());
    }

    private async Task Share()
    {
        ToastService.ShowInfo($"Votre score a été copié, vous pouvez maintenant l'envoyer !", "Copié !");
        await Js.CopyToClipboard($"J'ai joué à #WordleOfGod aujourd'hui !\r\nVoilà mon score : {Helper.TodayGuesses.Count(g => g.Score is not null)}/6 ({Helper.Guesses.Last().Score}%)\r\nEssayez de faire mieux que moi sur https://jbmerio.github.io/WordleOfGod/ :)");
    }
}