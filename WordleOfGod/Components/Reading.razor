@using System.Text.RegularExpressions
@inject IConfiguration Configuration

<div class="w-full px-4 mt-3">
	<div class="relative flex flex-col min-w-0 break-words bg-slate-800 text-slate-400 w-full mb-6 shadow-lg rounded-lg">
		<div class="rounded-t-lg mb-0 px-4 pt-3 bg-transparent accordion">
			<div class="flex flex-wrap items-center">
				<div class="relative w-full max-w-full flex-grow flex-1">
					<h2 class="text-slate-200 text-xl font-semibold">
						Parole de Dieu
					</h2>
					<h6 class="text-slate-500 text-md font-semibold">
						@Title
					</h6>
				</div>
			</div>
		</div>
		<div class="p-4 flex-auto panel">
            <div class="relative h-350-px pr-2 pb-10 overflow-y-auto rounded-lg">
				@Text
			</div>
            <div class="bg-gradient-to-t from-slate-800 h-12 w-full bottom-4 right-0 absolute"></div>
		</div>
	</div>
</div>

@code {
    public MarkupString Text { get; set; } = (MarkupString)"";
    public string? Title { get; set; }

    protected async override Task OnInitializedAsync()
    {
        using HttpClient client = new();
        
        var d = Helper.RandomDate.ToString("yyyy-MM-dd");
        var apiResponse = await client.GetStringAsync(string.Format(Configuration["ApiUrl"], Helper.RandomDate.ToString("yyyy-MM-dd")));
        var res = JsonSerializer.Deserialize<ApiResponse>(apiResponse, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        if (res?.Lectures?.Lecture?.Texte is null || res?.Lectures?.Lecture?.Reference is null)
        {
            // TODO : alerte
            Text = (MarkupString)"Erreur lors de la récupération de la lecture.";
        }
        else
        {
            Text = (MarkupString)new Regex("([1-9]\\.[0-9]+)").Replace(res.Lectures.Lecture.Texte, "<span class=\"text-xs\">[$+]</span>");
            Text = (MarkupString)res.Lectures.Lecture.Texte.Replace("verse_number","text-xs");
            Title = res.Lectures.Lecture.Titre;
            Helper.Answer = res.Lectures.Lecture.Reference.Split(' ').First();
        }

        await Js.InvokeVoidAsync("pageLoaded");
        await base.OnInitializedAsync();
    }
}